"""
    File: GreedyMotifSearch
    Author: steve
    Created: 22/11/14
    
"""
from builtins import Exception, len, range, enumerate, zip
import sys


def initial_kmers_from_dna(dna, k):
    result = []
    for row in dna:
        result.append(row[0:k])

    return result


def each_kmer(sequence, k):
    if len(sequence) < k:
        raise Exception("Can't get kmers from {0} as it is smaller than the k: {1}".format(sequence, k))

    for i in range(0, len(sequence) - k + 1):
        yield sequence[i:i + k]


def create_profile(motifs, number_of_motifs):
    row_count = number_of_motifs
    col_count = len(motifs[0])
    result = {'A': [], 'C': [], 'G': [], 'T': []}

    for i in range(0, col_count):
        result['A'].append(0)
        result['C'].append(0)
        result['G'].append(0)
        result['T'].append(0)
        for j in range(0, row_count):
            base = motifs[j][i]
            result[base][i] += 1 / row_count

    return result


def create_profile_with_pseudocounts(motifs, number_of_motifs):
    row_count = number_of_motifs
    col_count = len(motifs[0])
    result = {'A': [], 'C': [], 'G': [], 'T': []}

    for i in range(0, col_count):
        result['A'].append(1)
        result['C'].append(1)
        result['G'].append(1)
        result['T'].append(1)
        for j in range(0, row_count):
            base = motifs[j][i]
            result[base][i] += 1

    for i in range(0, col_count):
        for base in ['A', 'C', 'G', 'T']:
            result[base][i] = result[base][i] / (row_count + 4)



    return result

def get_profile_score(kmer, profile):
    profile_score = 1
    for i in range(0, len(kmer)):
        profile_score *= profile[kmer[i]][i]

    return profile_score


def get_profile_most_probable_kmer(sequence, k, profile):
    max_probability_score = -1;
    most_prob_kmer = ""

    for kmer in each_kmer(sequence, k):
        kmer_score = get_profile_score(kmer, profile)
        if kmer_score > max_probability_score:
            max_probability_score = kmer_score
            most_prob_kmer = kmer

    return most_prob_kmer


def get_hamming_distance(motif1, motif2):
    count = 0

    for i, (char1, char2) in enumerate(zip(motif1, motif2)):
        if char1 != char2:
            count += 1

    return count


def score_motifs(motifs):
    motif_score = 0

    for i in range(1, len(motifs)):
        motif_score += get_hamming_distance(motifs[0], motifs[i])

    return motif_score


def greedy_motif_search(dna, k, t, use_pseudo):
    """
    GREEDYMOTIFSEARCH(Dna, k, t)
        BestMotifs ← motif matrix formed by first k-mers in each string
                      from Dna
        for each k-mer Motif in the first string from Dna
            Motif1 ← Motif
            for i = 2 to t
                form Profile from motifs Motif1, …, Motifi - 1
                Motifi ← Profile-most probable k-mer in the i-th string
                          in Dna
            Motifs ← (Motif1, …, Motift)
            if Score(Motifs) < Score(BestMotifs)
                BestMotifs ← Motifs
        output BestMotifs
    :return:
    """

    best_motifs = initial_kmers_from_dna(dna, k)
    best_motif_score = sys.maxsize

    for kmer in each_kmer(dna[0], k):
        motifs = [None] * t
        motifs[0] = kmer
        for i in range(1, t):
            if use_pseudo:
                profile = create_profile_with_pseudocounts(motifs, i)
            else:
                profile = create_profile(motifs, i)

            motifs[i] = get_profile_most_probable_kmer(dna[i], k, profile)

        motif_score = score_motifs(motifs)
        if motif_score < best_motif_score:
            best_motif_score = motif_score
            best_motifs = motifs

    return best_motifs


def main(argv=None):
    """
    :param argv: the command line args
    :return: nothing
    """
    if argv is None:
        argv = sys.argv

    dna = """GCGTGGCGCTGTGGTTTGACAAGTCTACCATATATGAGTTTTATGCTTAAGCATACAGCCCCCTACGGAAATCCTCTACGAGGCCATCTCATGCCCCCTCCGTGGACCACTTAGTGCCCTAGATCTCTTTGTTAATTATTCGTGAGTGCATTCTTT
CTTCAATCTCCATTTGCGCCAAGTTTCTTAGGCCTGAGTGCTTGCGTTTTACCTAAGGTAAGGTTGTAGGCCAAAGTTGCAAAGAATGAGAGCACGCCTAGGCTGAATTGTCTTGTGCTCGGAAAGAGACGAAGTGCGCCCCACCTGCTAGATTCC
TTGGTCTCATGGCATACTCGTTAGTCCTTTTCAAAGCTCTCTGGTATTCCTCCATATTCCTATATTGAGACCTTCTTTTCAAGCAGCCGGGGAAGTTGGAGCCGGCCACTTACGGTCTTTTGCCGTAATCTTTAAGGATGGTTTAGTGGATGCGTT
AGTGGCTCCGTTGCTCAGCAACGGAGGCCCAGTCTGCTCAAGTGCGGCCGAGCCCCATTGTGACGCAATTTCAATTCTCTAGTAATCGTTAGTACAGTGCCTAATCAATATCGGCTAAGCGGGTATGCCAGGCCTCCTTAAACGCTCCATTGTCTT
TATACTGGCCAAAAAGTTCCTACGAGTGGATGCTTTCTACGCAGACCTAGGCTGGGTCCATCAACTCAACGCTCTTTCGAGGTCCTTCGGGCGCCGCAACCTCTCCGCATTCCACGCAGTTGGCGCGCGGCCAGTAAGGGCCTGGGTTTCTAGTGC
TTGTATTTTGACGCTCCTCTTCCCGCCAGATAACAAATTCCGAGTCATTGCCCCTCTTAAGACCAGTTGGTAGAGCGTCAAGATTGCCACAACGCTCTCCAGTCACCTTAGTCTGGGACGAGTGGCTCCCTTTCAATTTGTAGCACTCAGGGTCTT
AGAGTACCGCTCGGAAATGTTACACCCACACCAGCGGATCCGACACGAGGCTAAGCAAAGATGTAAGGCACACGGTCTTGTTGAAATAGGTAGAAATTATAGTCACAAAGTGCCTACGTTTGCTTGGTCTTAATACTTCGTCAAGGTTCACGGTCT
TTGCCCGCGCCTAGGTGTCTCCGGGCGCTTCTGGGCAAGACAGTAATATTTGCTCGCCAATGTCGCTCCGTGCAAATACGGAGGCGTGCTGTCTCTACAAGCGTGAATAGTGTATTCGTTTGCACTGTAATCCGCCTTGTAGCGTTTCTATTCGAG
TCACTGTTCGAGAAGACCAGGTCTCAGCCATCACTACTGGCATTCGAGAGGTAGTACGATCCGGCTACGAGCAGTGCGTTCTTTTCTAGTCTGTCCCACGGGAACTTCCGCAGAAAGTACGCCAGATGCCCTTGAGAGTATGGCTGTAATAAGTTT
CATTATGGGTGAATTTTGGTGGACAGTGGATTCTTTTACATAGAGATCTGTCGGACTAACCGGTAGACTATGGTGTGGCTGTGAGAAGTCGATCTTACCCGTCTCTTTTCAGGCTTGGCCTTGTGCTGTGAGCAGCCTCGAACTGCAATTCGAATG
GGCACCATAAGGAGTGGCTTCATTTTGCGCGTATAGTGCGAAGATCCCCTGTAGCAACTTGGTAGAGTAATGGCATGGCTCTCCCCCCCCAGAGCACCACAAATTGCATGAAAGCGGGCCGCGCAGATCGGTAGCCCTTTTAGCGGGGTCGACAAA
GACCGCGGAGCGCCTGCATACTCGCCCACAGGATCCGAGGTCCCCGTTAAACCTTGGACTGGTTATCATTGACACTGTTATCGTTATGGCCCTTCTAGTGACTACTTTTTAACTCCCCAAAGTTAAATAAAAGTCCTTACCGGTTGTGAATGTTCA
CAGTTCGGCCCACTGTATCAAGACCTTTCAGTTACCGTACAGTACCAGTTCTCAGGCTCTGTCTAATTTTAGCATAATTGACTATGCAGTGCCACCGAATTAACGCTTAACAAATTAGACAAACAATATTTGTTTGCTGCCAACAGTGCGTACGTT
GCCCAGACTGCGCTTGAAGAATTAGAACTCAGACGCTACGTGGACGGGTACACACGCGTGTAACCGCCCGCAAGATCTCTGGGCAATCATAAATGGTTCAAACTGTTGAGATTTCACGTCAGTGACTCCGTTGCAACTACCAGTAAAATATGGTAG
GTGCAATAGGAGACAAAAGCTCCCAGTGCGTCCTTTGGACCGTTAAAGTCAGTGAAACAAGGAAAACGAACTTGAACCGTACCGATAGGGCGCAATCCCAAATATCTCAAAAGAACTCAAGATCGTACGCTTCGTGCGAGCTATGGTGGGAGGTTC
GCGCCTACCTTCTTCCCCCGAACAATTTGAAGTACTGCAGGAACGGGAAGGTCGCAACTATTGACACTTTACTGATTCTCTCGATTAACCGTAGCACAAACCAAAGGCAGTGCCTGCGTTCTTCGCTATCTACGCCTTTCCTCAGCCCTGCATAGC
TCCGCCTTCCACGCGTACACTCGGACTCGTATCTTATCTGTGGAGAAGTATAGCCTGGGCCGTAGGGTCCAATGAGCCGCATAAACGTCGGCTATACCGTCCATGGGGAGTGCATGCTTTAATCAGGAACAACGATCCCGGGAGGACGAAGACGTT
AACGTTTCTAAATGTCCAGCAACCACGTAACTAAGGAAATTAATTAGCACCTTAGCCATGAACTCCCGAGCCAGTGGGTCCATTGGTCAACTGTCATTTCCTCAGAGATGACATAAGTCTTTACCACCCGCCATAGACGACAAGTGGCCTTAGATT
CTATCTTGGCCACAAGAGCTGGGTTTCCTAACGCATGTATTATCAGGGCCTGAAAGAACACTACCGGGTACGGACCGTCACCAAGGGTATCCCCAGAGTGACTACATTATCGAGCATTGGGCCGATTCACATCTAGAAGAAGCACCCGCTCACCGG
TTTGTAACCTCTGCTCGGAGAATGTCGCAATACAGCCATTACTTAAGATCCGCAACGACCTTTCTACAGAAGCAATGGATGGAATACATGCTGTCAGGTGTCCTAATTTTTCTCGAAGCGAGTGAATACGTTGGGCCGCCGTCACGACTTAGAGCC
GTGTTTGCTCAACTGCTAGCGCCCAGTGCATCCCTTGGTTCTGGGATGCTCGCTACCGCGCATCCCGCCCCCATTAGATAAAGTTTCTCCCCAAAGACCATAGTCCCTGAGGACCAGTAAGTGTTCATAAAGGAGCGGCAAGCAATAGATTGTCGA
GCACGGTAGGTATGTTTACTAGATGCCCTTAATCATACTACTACTCCTTTGACCCCTGTTGACTGCCCGTAGATTAGGTGACCGGCTGGAACTCCCCAACTGTCCATTAATATCTCAACTGCAGCGGATGCAAGAAGAGTGGCGAGTGGCTACGTT
TCATCGACAGTAGTAACGTGTGTTCGCAAGAACGGCCTCTCTTTCGTGAGTGCATGCCTTTGAAATAACAGTCCCTGGGTGATAAAAGGACTCTCGGTACGTGCACGCTTCTCGCAATTTGAGCCCTTCGTTGAACTTGCCGGATCGTGCTATATA
TAGGCTCTGTGTGACAAGTGTTTGGTTTTGCGGTGACGTCGACACAGGGAATGGTATTATGGAGTCTCCACGTTCTGTCGGTTCCTAATACATCGAAATGATGAAGGCGGGATGTATCCTAGTGGATCCATTAACTACGTGTTCTTCAAATACACG
TCCATGGCGCACCACGTCGGTTATCCGTGGAAGGGACGAGATACGGAACGGAATCGTAAGAGTGCATCCATTTTCCGTAAGGAAGTCGATCCGAGAAGCGACCTCTCCGATATCAGGAAATAATTAACATCGTTAGCAGCATGATCTGCAGCTGTC""".split(
        '\n')

    k = 12
    t = 25

    result = greedy_motif_search(dna, k, t, True)

    for r in result:
        print(r)


if __name__ == "__main__":
    sys.exit(main())