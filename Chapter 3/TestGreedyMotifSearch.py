from builtins import len

__author__ = 'steve'

import unittest
import GreedyMotifSearch as gms


class MyTestCase(unittest.TestCase):
    def test_initial_kmers_from_data(self):
        initial_kmers = gms.initial_kmers_from_dna(["aaaaaa", "ccccc", "acgtc"], 3)
        self.assertEqual(len(initial_kmers), 3)
        self.assertEqual(initial_kmers[1], "ccc")


    def test_each_kmer(self):
        result = []
        for kmer in gms.each_kmer("ACGTTT", 3):
            result.append(kmer)

        self.assertEqual(len(result), 4)
        self.assertEqual(result[0], "ACG")
        self.assertEqual(result[3], "TTT")

    def test_create_profile(self):
        result = gms.create_profile(["A"])
        self.assertEqual(result['A'][0], 1)
        self.assertEqual(result['C'][0], 0)
        self.assertEqual(result['G'][0], 0)
        self.assertEqual(result['T'][0], 0)

        result = gms.create_profile(["ACGT"])
        self.assertEqual(result['A'][0], 1)
        self.assertEqual(result['C'][1], 1)
        self.assertEqual(result['G'][2], 1)
        self.assertEqual(result['T'][3], 1)

        result = gms.create_profile(["ACGT", "ACGT", "ACGT", "ACGT"])
        self.assertEqual(result['A'][0], 1)
        self.assertEqual(result['C'][1], 1)
        self.assertEqual(result['G'][2], 1)
        self.assertEqual(result['T'][3], 1)

        result = gms.create_profile(["ACGT", "CGTA", "GTAC", "TACG"])
        self.assertEqual(result['A'][0], 1 / 4)
        self.assertEqual(result['C'][0], 1 / 4)
        self.assertEqual(result['G'][0], 1 / 4)
        self.assertEqual(result['T'][0], 1 / 4)

    def test_get_profile_score(self):
        result = gms.get_profile_score("ACGT", gms.create_profile(["ACGT"]))
        self.assertEqual(result, 1)

        result = gms.get_profile_score("ACGT", gms.create_profile(["ACGT", "CGTA", "GTAC", "TACG"]))
        self.assertEqual(result, 0.25 ** 4)

        result = gms.get_profile_score("ACGT", gms.create_profile(["CCGT", "CGTA", "GTAC", "TACG"]))
        self.assertEqual(result, 0)


    def test_get_profile_most_probable_kmer(self):
        profile = gms.create_profile(["ACGT", "ACGT", "ACGT", "ACGT"])
        result = gms.get_profile_most_probable_kmer("AAACGTTTT", 4, profile)
        self.assertEqual(result, "ACGT")

        profile = gms.create_profile(["CCGT", "CCGT", "TCGT", "GCGT"])
        result = gms.get_profile_most_probable_kmer("AAACGTTTT", 4, profile)
        self.assertEqual(result, "AAAC")

    def test_score_motifs(self):
        result = gms.score_motifs(["ACC", "ACC"])
        self.assertEqual(result, 0)

        result = gms.score_motifs(["ACC", "ACC", "ACC", "ACC", "ACC", "ACC", "ACC", "ACC"])
        self.assertEqual(result, 0)

        result = gms.score_motifs(["ACC", "TTT"])
        self.assertEqual(result, 3)

        result = gms.score_motifs(["ACC", "CCC", "AAC", "ACA", "ACC", "ACC", "ACC", "TTT"])
        self.assertEqual(result, 6)


    def test_greedy_motif_search(self):
        result = gms.greedy_motif_search(["AAAA"], 4, 1)
        self.assertEqual(result, ["AAAA"])


    def test_greedy_motif_search_example(self):
        result = gms.greedy_motif_search(
            ["GGCGTTCAGGCA", "AAGAATCAGTCA", "CAAGGAGTTCGC", "CACGTCAATCAC", "CAATAATATTCG"], 3, 5)
        self.assertEqual(result, ["CAG", "CAG", "CAA", "CAA", "CAA"])

    def test_greedy_large_example(self):
        dna = """GATGGACCGGGCCATACATGGTGACACGCATCAGAAAGCTGTCCCCGTGCCTTATGCGCTGTCTGTTAGTACATCTCTCTCAATGGCCGTATTTTCAGAACAAGTATCACTTGGATCATCATCTACTCGACGGAGGGCGCGCAAGTGGGTATCTCG
TAAAAAGGTATAAGGGAGTCATATCCGCAGTCCTAGTGACCTTTCCCGGCCCTAGCAGTGCTCCGATAGCCCATGGATGAGACGTAACTCGGCTACTGTTTGTGACTCAAGATAGTTGCCGTCGATATCTCGGATTCTGCTTATCGTGTTACGAGC
AACCACGAGTACCTCTGTCGTGGTCCTTCACCAGGACTCGAAATTTGGCTCACGCCCAACGCCAAGATTACGTCGATCGTTCCTGTTGATATCTCGCCGCATATCAGGTTTATACTGATCGGCTCAGTGATTGTTAATCATCGGCGCGGGTTGTCA
TGTCATGTGCGGATACAGTGGTGACACCAGGTCACCTCCGACCTAAAAGCGTTCAAGGTATGGCCCGAAGAGGTAGGTATCTCTTGTGCCCGCTGCTGCTATCACTCCCTGTGAGCCCCGACACGAATGTTAAACCAGTTTATATTCGCTCGTCAT
AACCTAAACCCTTGCTTCCCACCATCCCTGCGAAGCAACCTTATCCGTAGTTCAGTCGCGCTGAACTCGGAAAGTGCGCTCACGAGATTCTAACTTACACTTGTTTAAGTACCACGTCCGGTGGATATCGCTGGCGTTGAAGGATAGTTCTGGTTA
GTGCCCGATATGCCCGTCAGGGTTGAAGTCTGGGAAGTCGTTATCCCAAACGAAATACCCCGTTCGCAGGCGTGATGTATATCCTGATTAGTACCGCGTATAATATTAGTTTCGCACAGGAGCGTGCTTGTTTTGGGTCATGGATTGGGTACAGCA
TAGTCTTCGAGGCATCTACCTGCGACCGAGCTTGCGATCCAAAAGCATACCCATGAAGTTTGCAAATCTTTCTTAGAGCTACAGGTAGATATCCCTGGGCCGGTAACTAGTAATATGTACAGTTTAGTTGTCCTGTACAATACTGATTGGAGTCAG
AGGAGACGTGTTTGGTAGGCGCTCGACCCTTACCCCCCTATCTCGACTGGCATTGGACGTCCTCAGACTGGTGGATTTGACCTAGTGGTTATCACGCACATGGGAGAACCCGGTCAGAATACATCCTGTTACAGTCAGACGCCGGGTCATTCGCAA
TGTGGGGATCGTCTGATTCATCGACGTCATGGAAACGGGGACGGGCCAGTGGTTATCCCATGCTGCCTTTTAGGAATTCTAGGAGGCGTTCCTAAATAGCTCGCCCGACGATATCCTACTTGATTGTGGCGGTATACCTTGCTGAACCTCGCAGTA
CGCAGTGCACTAGTGGCTATCGCCTTTCTATCCCTGAGGCGTTTGCGTTATAAGATCACTCTGTCGGTGTGAAACCACTGAGTCACACTGACCGGTCGACTGGCCCGTCATATGCAAGTTGAAACGCTTACTGCCGGGTATCGCTCTAAGCTCGAC
TACTCGTAACTTCAAAATCTCGTAGGGTCTGCAGAGTAAGAATCCCGGATACTTCAACATTATCGATTCGTCAAGACGTGCGGAGTGGATATCCCTTATTCCTATACGTCACAAGCCGCGGTCAAGTCGCTTACGCACGGTAGAGCGGGAAACCCT
GCTCTAGTACGCCACAGTGCCAGTACATGACCTCACGAGCCGCCACTTACGTTGATATGTTATAAATCACTAGTTTCGTTGGTACAAACAATAAGTGAGAAGCAATGAGCAACTTATCTCATAAAAAGTGTGGTCGTTATCACACATGACATAAAC
GAGACGGTCGTAGAAATTTGCGCTTGCTCGTATCTCAGTATCCTTCAAAGATTGAACCGGATCGCGGCGGCTAATATTGAAATCCTTAGACTTAACGTTGGTATCACTTTAGAATTTCTGACTTGAGGGTAGTGACTAGACAATCATGATGGAAGA
GATCGGTGGCAGTTGAATTAAGACTAGTTATCCCCTGCTTACACTTTTTCCGCCCGGACACGTGTGACGGTAGTTGATATCTCTCAAGTATCCCGACTTCACGTACGATGCCACCCATCTCCGGCAAACACACTTCTATAATATCGTGGAGCCGAA
GTAGGTATCACCAGAGTTCTCTCGGTATGTGGCGCTAAAACCTCTTAGAGTATGAAGGGTGAAGACCAAGCTCATACCACCCCTATATAGGGCTAATTAATTCCACATCCAGGCAAGATGTCACCCTACAGGTCGCTCACTTGTGGAGAACATCAC
GTGGCTATCGCTGTGATCCGTCACACAAAATCAACTTTGTAGTATTTTGGGTAGTCGGGATAACGCGTGGTCTAAGGTGAGCTGCCTTTGATCCGTTGGGTGGCTACCTTGCAAGTTACCGGCTTGTCACTAGATATAACCGGAAGTCTCTGCAAA
TGAGCAGACCCGACAAAGGCCATGACTTCAAAACCGGTTGTGCAGCGACAGGTACTTTAAGTACGGCACCATTAATATCGCTATACTTACGAGTTAGTGGGTATCTCATGCAAACAAACTGCTACTAGGAACTTAGACGAACTTACCAGGAGGATT
AGTGATCTGAGCATAGTATACTGAGAACGTGTGTGTGACCCCTCCAGCGTCCCCGGCTACTGTTCCAGATCCTAACTAATTACTGCTAGCGATCTGGTCGATATCGCTACGGAACGAAGCCGTACAATCGCCCAGAAGCGGTTAGTCAAGGGCGTT
CAAAATGGGAGTACTTCTCGTAGAATAATTCGTCTGTAATTCCTAGGTTCCATAGATAGGCCTCGATAGTGAAATTCCTTCATGCCCCGAGGTGGCGTTGATATCTCCTTTCTAAGCGGTACCCTTAAGAGTACTCGCGATGGGCTTATCCTCCTC
GTTGGTATCACCCCCAATCCTCTTAGTTTACACTGTAAGATTAACGTCAGGGTGTTGTGGATGGCTTTTCTAATTTAGGTCCTCGGGATGCTCAGGTGTTACTATCGGACTGAGTGAATGTAAGTCCGGGTATCAGCCATGAAACCACTGGAGATC
CCTCGGAAAACGTCGTAAGTGGTATCACAATCCACTAGTCACGGAGGGCGGTGAGTGTCTCGATGCTCAACCCCCAACCCTCAGATGAGGCTATCTGTAGGTATCACTTACGTCACTACGGGGAACAGCTCGCCTTAAGTGTAGGCTAGGTATATG
GGCGGCTCCATCCGATGTGACGGATTTCATGAGGCACAAGCGCTTCACTCCCTATTTGGCTCGTGACAAAGTTCAACGGCTTTGCAGATATCCATGGTCGTTATCCCGGTGGTGAACCTACCGTCAAGTCTCTACAGTGCGCGAAGTGTCCCGGGC
TACTAGTATAAGTTCCGAGCCAAATGGATGGCCCAGGCGCACTAGTGTTAGAAGGATTCGGGCTGTAGGTACATCAAGCTCGAATTTGTCCCACGTCATTCTGGGCCACCCGGACCACAGAAGACCTCTCTCTGTGCCGACGGTGTGGTTATCACG
GTGGTTATCACCGGGATCGAATACAGATACGTCTGGTACATGCCTTGTCATTATTCATACGCCCCCTGGGCCAACAATCCTTTGTCAACCGCGGTCAAAAAGGTAACTAGGATCGGCTTGATCTCTAATTCCGGACTGTTCACCACGGGTCGACCG
CATCACGCAATGCGAACGACTGAAGAAGGCAAGGACAGTTACGCAACCTATCATGCGTAGATCAAGGTAATCGGGACCGGTCTGGAATTTAGGAGTGTTGTTATCGCAACCTGCGATCATAACATCCTCTTATTGCCTATAAACCGACCCTGACCG""".split(
            '\n')

        result = gms.greedy_motif_search(dna, 12, 25)

        expected = """AGTGGGTATCTC
TAAAAAGGTATA
AACCACGAGTAC
TGTCATGTGCGG
AACCTAAACCCT
AGTCGTTATCCC
AGTAATATGTAC
AGTGGTTATCAC
AGTGGTTATCCC
AGTGGCTATCGC
AGTGGATATCCC
AGTGAGAAGCAA
AGTGACTAGACA
TAAGACTAGTTA
TATGAAGGGTGA
AGTCGGGATAAC
AGTGGGTATCTC
AGCGGTTAGTCA
AGTGAAATTCCT
TGTGGATGGCTT
TGTAGGTATCAC
TGCAGATATCCA
TGTGGTTATCAC
TGTCATTATTCA
TGCGTAGATCAA""".split('\n')

        self.assertEqual(result, expected)


if __name__ == '__main__':
    unittest.main()
