"""
    File: TestMedianString
    Author: steve
    Created: 20/11/14
    
"""
from builtins import Exception, len
import unittest

import MedianString


class TestMediaString(unittest.TestCase):
    def test_min_distance_error(self):
        self.assertRaises(Exception, MedianString.minimum_distance, "AAAA", "AAA")

    def test_min_distance_exact(self):
        d = MedianString.minimum_distance("A", "AAAA")
        self.assertEqual(0, d)

        d = MedianString.minimum_distance("AAAA", "AAAA")
        self.assertEqual(0, d)

        d = MedianString.minimum_distance("AAA", "AAAB")
        self.assertEqual(0, d)

        d = MedianString.minimum_distance("AAA", "BAAA")
        self.assertEqual(0, d)


    def test_min_distance_not_quite(self):
        d = MedianString.minimum_distance("AAAA", "BBAA")
        self.assertEqual(2, d)

        d = MedianString.minimum_distance("ABC", "BBAA")
        self.assertEqual(2, d)

    def test_min_distance_not_even_close(self):
        d = MedianString.minimum_distance("X", "Y")
        self.assertEqual(1, d)

        d = MedianString.minimum_distance("XXX", "BBAA")
        self.assertEqual(3, d)


    def test_total_min_distance(self):
        d = MedianString.DistanceBetweenPatternAndStrings("AAAA", ["AAAA"])
        self.assertEqual(0, d)

        d = MedianString.DistanceBetweenPatternAndStrings("AAAA", ["AAAA", "AAAA", "AAAA"])
        self.assertEqual(0, d)

        d = MedianString.DistanceBetweenPatternAndStrings("AAAA", ["AABA", "BAAA", "AAAB"])
        self.assertEqual(3, d)

        d = MedianString.DistanceBetweenPatternAndStrings("AAAA", ["AAAA", "XXXX", "AXXA"])
        self.assertEqual(6, d)

    def test_from_textbook(self):
        d = MedianString.DistanceBetweenPatternAndStrings("AAA",
                                                          ["TTACCTTAAC", "GATATCTGTC", "ACGGCGTTCG", "CCCTAAAGAG",
                                                           "CGTCAGAGGT"])
        self.assertEqual(d, 5)

    def test_homework(self):
        dna = "CCCATATAGCTATGGGCGAGTAGTACCACAACATACGTGGCTCATGCAGACTACTTTAGCGCATATATTAAACTGCCCTCACTTAGCTTCAATAATTGAACGGATCG CCTCCTGTTAGATTACAGTTCCCCCATCGAACGTTATAAAACCCGGGTCTTAGTTGCTCCCATTCACCCTAACTCCTAACGATGTGCCATGTTGGAACGTGGAACTG CTTATCTCAAGTTTCATGGCAAGCAATAAGGAACACGGTGTATGTCGGTCATCTAGTATACGCGGGGTCGAGTCAGTCAGGAACGATTCATCGAGAACATATCAGCC GAGTCCCTATATCGCAACATGGCGAGGTCATTCTGCTACGTTCACATGGGTCTCATCGTTTGAATTGGGAGATGCTCCTTGCTTTTTCTGCTATGAATCCTATCTTG TTCGGGGTACTATAGAATTCCCTCACTACGACGATTCAGTGCGTTTTGATTCTCGCAAACAGAATTGGTGGAGGTGACTGATGGAAACATGTATGCTTACGGCAAAA GCTTCATTCCGATAAACGCACCGAAGAGCGGCCATGATTCGCAAAGCGAGGAGGTCGTCTCAAACTTCCAACTTAATAATAGTCCAGTATGAGGAGTATGAGAAGAA CCATCTAACCATTTTATTAGTTGTTCCGCAACCGGAGTAAGCACGAAATGCACAGATTAGTGGATAACCATACCGCGATCGTACACGGCGCTCTACTTGGGACAGTT TCCCCTATTCTACTCTCGAAGGTAAGCTGGCATAGGCTACTCCAAAGGTACCCAAGACTGGTAGTGTCCATGAGAGGCGACATTTCGATCGAAGGTCACCCCCGAGG GATAGAAGTTTCCGAATCTCTGCTATGACCGAAACTAGTTGGAGAATGAATGGCCCCGGATACCCCATCACCACCGGTCGGGGGGATAAGCATGAACCACAACACTC ATTGTCGAGGGAATCCATAAGAAAGGTACCTCATGAGTCGGCTCACTAGGAAGGGACGACTCACCAGGGTATCACAGTCAAGGTGACTACCGCAATAGACTTTGATT CAAATCGCGCGGTCCTCTAGATACGATGCTTGCCTCACTCCGAATAACTGTGGTATGTGGACCCCGTAAGTCACTGAACCCTGGAGCCTCGTACTGACCACGGCATA GTGGATCGTTGGGATAGCCGGATGATCGACTTCACAATCAAACCCGCTTAGTACAACCCTTGCCCGATCAGGACACTGGCTAGCCAACAATGGACACTGTTATAGAT TTAGCTTATGAGGATGCAGGCGACGTGGCAGCGCACCGGGACCAAGTATCGAACGGATGAGGGTGTAGGATGCGCCTGAAGCGTGCTTTTGTGAACGTCGTAAATCG ATAATCACGTATCCATACCCGCTACGAGCCACGAGGCCCTCGTTCCGCAATGCCCTTCTCTAGAACACACCTCGCAAAGCGCACGTTTCACAGGTAGTAGCGCTTTC ATCCGTCGAGCTGCCCTATGAGAATTTCCCCCCCTCCTCGGCGGTTGATGAGGGACTTAATGCCCGCAACTATAGAATTTCGGCGGATTGCGAAATGCATTGTCTCA GAGCCGGATTACAACGTGGCTGCTGACTGGGTCTGTCCGCAAGGCCCCAAAGGCAGAGCTTAAGCAAATTCTAGTGAGATGCCTAATCCCCATACATATAGCATCGC ATTAGCTTTTATCTCGTTAATCGCTGAGGACATCTCATGTAAATATAAATGTTGTTCGCTAATGACTTTGGTGTCCTACGGTTACAGAGGGTAGCTTCGTGCCGCGT CCATCTTAGGACTTTGCCACGTGTATCTATAGGAGCCCAACTTGGATCAAGTGGTACCCTTCGTAACCGGAAATAATAGCGAGTTAGCCCTCCGATTCACCGTCTAC TCGTGATTAAGGTTCGAGTGGAGGCCGGTCGTAGTAACGGCACATCTAACTGCCCATCCAGCAGCATGCGCCAGCCTCAGCCATACCGCGCTTAGTGGTGAGTCCCG CGGGGTCACTACCCGATGGAGAAGAGAACCCCCTTCTAGACGGTTGCATCGCTACAGCTCGGTGTCATTTCGCATACTCTCATAGACCCCGCTGACGTGTGGCGCTC CACGGCCTTCGGCCGTCTAGCCTCTCTGTGGCATTGAGCTACCCGGCCGTTGAAATTACCGGATATTTAGGTAACCTACTTGACCGGATATGCCAAAGCAATTGATA TTCAACACTAGAGGACCGTCCACATATTGACCTTCGCCCTCCATGCGGTCAATGAGCCGAACCTAGGGGGCTGAACAAGGACAGCACGAATCCTTCACCCTGTCGTA GCACCAGTAGTGATTGACCACGTTTTGAGCCACAGAAGCCAATGCCGCAATCAAAAATAGCTTGCATAGCGATCGCCCTAACTTAAACCTTGGTAATTCTAGACGAC GTTCGTATGGCTGACTTGGTTATGTTTTGAGGCTCTGCGAGGAACCGATCCGGCACTCTAAACATAAAACGATCTAATTTCGCAGTAACAATGACGAACACGAAACA TACTACCTGGGTCGCGTTCTGAATCCAGATCGAGAGCGGGTGACTCCAGCGGAACCGGAAGCCTAACCATGGCAGTGATAGCCTGTAGCCTCTCAGTCGACTTCACC TTTAGGTAAACGTTACAAGCTTGACCTCGTAGCGGGGATCTGTATGGCCAATAGCCGTGGATGGAACTGAGATTTGAGCTTTGTGTGCGCGTGGTTCCATACACCTA GCCTTTAGTCCATTCTTCAATAAATAAGGCTTCGAGGTACAACTTGACTGTTACCTATATGGGTGTCGGACCGTAAAATTGTGCGTGTTTCACGCAACGGAGCGAGC TAGGAGTGGCACTGGAAGGTGGTCTAGATCAACCTAGTAGATCAATCATAGGGCGCGAATACTGCCTACTATAGTTAGTCACTGAGGCGCGAATGCGGCTAATCTTC CTGATGGGCTGTTATGTGGGCTCTAGAATCGCCCCTTCAAGATTCCATTCCTTGTAGACCTAACACGGTGCCGGATTCTGTAAAAGGTTAGCGGAGAACTGGTCGGG TAGCTCGTGGTGTTATTACGGTAGAATGGGTCACATGAAGGGAGCTTAAGTATATAGTAGGTACATTGTTGATTCCCAAATGAGTTGGAGAATGCGGTCTCTTTTCC TACATCATCGCTTTAGCTGCGAGGAGGATGGGCGTGGTGACTTAAGTCCTGTATCCGCTAGCCATAGTATGATGTATAAATACCTGTTTTGCCAGCACACGAGAGAT CGTTTCTAGGGGGTCGCAGAAACTTTCTTATCATGTAAGATTACTGACAGCAGCCAAGTAGAGCTATCCCAAGGTTTCTTCCACCTGTGTCCAGTTTCCTCTTAAGA GTACCAATCGGGGGCACTAGCTGACCGAGATCATGGTTTGGCTCGGTCCTCCCTATCATGAAGGGGGGGCGTCGTCCGGAAACGAAAACTTATCGATGTCCCCAAAT GGACGCCAGTCATAATCGCACCCGACTATCAAGGCACTGAGAAACTACACAAGGTGTGGGGTCGGAAATCGGGATTGAGTAAGGCGTCGAATCTAGGCTTCTGCCGA CGCAGGCGAGGACCTGCCTAGGTACCTGTTCACACTGCACAGAGTGAACGAAATTTTTCGGCGGGTTTGAGTGGCCTTTGCTGATTCGTTTACCTAAAATACGATGC GGAGGTTTGGTCTTTACCGATCGCTTTTGCGGAGGGCATACGGCCGTTAGGCTTTTCCCCAAACTTGTACATCCCAGTCTAGATAGTATTAGCGGGTTCAAAACGTC CCATTCTTTAATCATTGATCTAATAATTAGCTGCCGTGGTCATTCTATTAGCGGAGGGTGAACGGCATTCGACAATTATCCTTTGTGAATTGGATTACTTCTGTGCA ACCCTACCGATAAACCAATGCAGGCATTCCGCGGGGTAAGACCTTCCATAGTTCATGTTGCGAAGTGACTGTTTCGTAAGCGTGACGGAGGGTGGACTCTTTCCGGC CCAGGTTGTTTCTATGTTGCATCCGTCATAGGGGGCAACATTTTGACTGGGTCTAGTACCGTGGGCAAGGAGTTTTTGGTTGGGGGTCTCTTAACTTGCCGACTAAC".split(
            ' ')

        print (MedianString.DistanceBetweenPatternAndStrings("TCAGCGC", dna))

    def test_build_all_kmers(self):
        kmers = MedianString.build_all_kmers(0)
        self.assertEqual(len(kmers), 1)

        kmers = MedianString.build_all_kmers(1)
        self.assertEqual(len(kmers), 4)
        self.assertEqual(len(kmers[0]), 1)

        kmers = MedianString.build_all_kmers(2)
        self.assertEqual(len(kmers), 16)
        self.assertEqual(len(kmers[0]), 2)

        kmers = MedianString.build_all_kmers(4)
        self.assertEqual(len(kmers), 256)
        self.assertEqual(len(kmers[0]), 4)


    def test_median_string(self):
        m = MedianString.MedianString(["ACGT", "ACGT", "ACGT"], 4)
        self.assertEqual(m, "ACGT")

        m = MedianString.MedianString(["AGGT", "ACTT", "CCGT"], 4)
        self.assertEqual(m, "ACGT")

        m = MedianString.MedianString(["AGGT", "ACGT", "CCGT"], 3)
        self.assertEqual(m, "CGT")

        dna = "GTTGCTATCTTTGTTCACACAGCAGTAATCGTGTATCTTTTC TGCAGAACGGGGCAGGTCACCGCATTACCGCCCCGGGGCCCG AGCGATATCATTAGTGGCACTGCAGGCCCAGGAATTGGAGCG ACTGCAAAAGGAAGCTGTAGTATCCTGTTTCTTTTAGCAGCA TCTCGCATCAATGTAGAGTCGGCTACCGCATCTCGGGAACAT AACGGGGGAATACAATCACGTGAGTAGATGGCAATAACTGCA CCACCTTTAAAAACTGCATCAAGTACTGACTTGGAAAGTTCC CTCATCAGGCGGGGTAGCAGACGGACGGCATTACACATCGGT ACGGCAGGTCCTTTAAATAAGGGTCATGATCCTTGCGCCAGT CTACCAAGTCACCCGCTATTCTAGCTTTCGACTGCAACAATC".split(
            ' ')
        m = MedianString.MedianString(dna, 6)
        print(m)

    def test_homework(self):
        dna = """CTCGATGAGTAGGAAAGTAGTTTCACTGGGCGAACCACCCCGGCGCTAATCCTAGTGCCC
GCAATCCTACCCGAGGCCACATATCAGTAGGAACTAGAACCACCACGGGTGGCTAGTTTC
GGTGTTGAACCACGGGGTTAGTTTCATCTATTGTAGGAATCGGCTTCAAATCCTACACAG""".split('#n')

        m = MedianString.MedianString(dna, 7)
        print(m)
