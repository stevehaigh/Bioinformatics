"""
    File: GibbsSampler
    Author: steve
    Created: 25/11/14
    
"""
from builtins import sum, len, range, Exception, str, map
import random
import sys

import RandomisedMotifSearch as rms
import GreedyMotifSearch as gms


def biased_random_selector(pdf):
    total = sum(pdf)
    r = random.uniform(0, total)

    running_total = 0.0

    for i in range(0, len(pdf)):
        running_total += pdf[i]
        if running_total > r:
            return i

    raise Exception("Something's wrong, didn't manage to find a value in random selector")


def build_matrix_excluding(dna, i):
    dna_2 = dna[:i] + dna[i + 1:]
    return rms.create_profile(dna_2)


def get_profile_score(kmer, profile):
    profile_score = 1

    for i in range(0, len(kmer)):
        profile_score *= profile[kmer[i]][i]

    return profile_score


def print_profile(profile):
    for base in ['A', 'C', 'G', 'T']:
        print(base + ": " + ", ".join(map(str, profile[base])))


def random_most_probable_kmer_for_profile(profile, sequence, k):
    """
    generate a PDF, then use the selector function to pick which value to use fo rk-mer start
    :param profile:
    :param sequence:
    :return:
    """
    pdf = []

    for kmer in gms.each_kmer(sequence, k):
        pdf.append(get_profile_score(kmer, profile))

    kmer_start = biased_random_selector(pdf)

    result = sequence[kmer_start:kmer_start + k]
    return result


def gibbs_sampler(dna, k, t, n):
    """
    GIBBSSAMPLER(Dna, k, t, N)
        randomly select k-mers Motifs = (Motif1, …, Motift) in each string
            from Dna
        BestMotifs ← Motifs
        for j ← 1 to N
            i ← Random(t)
            Profile ← profile matrix constructed from all strings in Motifs
                       except for Motifi
            Motifi ← Profile-randomly generated k-mer in the i-th sequence
            if Score(Motifs) < Score(BestMotifs)
                BestMotifs ← Motifs
        return BestMotifs
    :param dna:
    :param k:
    :param t:
    :param n:
    :return:
    """

    motifs = rms.initialize_random_motifs(dna, k)
    best_motifs = motifs[:]
    best_motif_score = rms.score_motifs(best_motifs)

    for _ in range(0, n):
        i = random.randint(0, t - 1)
        profile = build_matrix_excluding(motifs, i)
        motifs[i] = random_most_probable_kmer_for_profile(profile, dna[i], k)

        motif_score = rms.score_motifs(motifs)
        if motif_score < best_motif_score:
            best_motif_score = motif_score
            best_motifs = motifs[:]

    return best_motifs, best_motif_score


def main(argv=None):
    """
    :param argv: the command line args
    :return: nothing
    """
    if argv is None:
        argv = sys.argv

    dna = """TACCCACCCTTGTTGTTAGATGCGCGGACTTCTCGTCCGACGCTGTCTAATACTGCGTATCCGCATAGTCTCTAACCTTCTATTTAGGCCCTTGCAAGAAGTTGATGAGGAGCAAAGTACGGAGTGAACATCCGATCGGTTGGCAGCACACCGAGAGCCTTCCATCGCAAACGTACGCCTCACTCATGGAAGCTGCCCGGGCTCATCGAACGAACTAGACTCAGTTTAGGGTAACCTTAACGACATGGATCGAACCGCTGAGTTATAGGGACGCGCCTAGATCGAGGATGGGAATGGCTCTTCAAAGATTTTACCCACCCTTGTTG
TTAGATGCGCGGACTTCTCGTCCGACGCTGTCTAATACTGCGTATCCGACTTCCGATCTTTCCCATAGTCTCTAACCTTCTATTTAGGCCCTTGCAAGAAGTTGATGAGGAGCAAAGTACGGAGTGAACATCCGATCGGTTGGCAGCACACCGAGAGCCTTCCATCGCAAACGTACGCCTCACTCATGGAAGCTGCCCGGGCTCATCGAACGAACTAGACTCAGTTTAGGGTAACCTTAACGACATGGATCGAACCGCTGAGTTATAGGGACGCGCCTAGATCGAGGATGGGAATGGCTCTTCAAAGATTTTACCCACCCTTGTTG
GAACCAGTCGCTATCGAAGGAAATGAGTCCTGAGTTTTTAACTATAGATCTTTCCAATGTCACAACACGTCTCTTGCCCCCGCATAGGTGCCTCATTGTTAGTGGTAAAAGTTCGGCAGAAAAGAATACCGTTATGATCAGGTCGTGGAAACTGCCTCAGTCAGGAGGAAGACCCCGAGGTCCGATCACAAGTAGCACTAGTTCAAATCATGGATAGTAAGTGTCCCTCGCCGCATTTTTCGGTGAAAGTGCTCAGACGCCCATGTAGAATACGCCTTCCGTCCTCTGAAAGAAATAGCTTAAGGAATGAAAGCCCTAAGTGGGTC
ACGACCCCCTCTAGTGCTTAATGGTTGTCGGGCCCGTACCGGGATACATCGCCCAGGCCCGATTTTTTCTCAGATACTGCGCAGTTCGAGACAGGTCACAGAGACAACTCACCCTCTTTCCAACGCACCCCGTTTGACGCGTTTGGCGCACCCAGACGGTCATAAGTCTTCCCAGCCAACTTGAGGCTGTATACGGCGGGCCTGTCCTTCTTAGTGGTTCGTAGCCTGAGATGACAGCTGGCTCTCCTGCAAAATAGTGAAACGTACAGGCGTACTGAAGCAACACTAGTCGCGCCACGCTGATAATATGCGCATTCGAGTCCGAT
TCGGGACCCTATGTCCACGGAAGAGGATTTGCCACACCTTCGTTATGTGGAGAAGAAATTATATACGTGCTATCTCGTTGAAGCTCTCTCTCACATAGATGCTATCGACCAGTTAAAGCGCACGGCTCTGGCACTAACTTGGTCTCGGCGGCCGGACCGGTATGCAGGGCAGTTAAAGTGAGTAAAGGAGTCAACGGCAGAGCGTCGCAACCGACCACGCCTACGATGCTTGTTTGTTCTAGGCCATTGTGACGATGCTTCTATGTGTGCTAATTGGGACTCAAGTTTCAATCGGACTGGCACTCAGCGACTTTCCTTGCCGTACC
ATTGTTTGTTTCGCGTGTTGGGAACTGGCATAACGTTCCCTCACTAATCCGACGATGGCGGCTTAGGGACGCAGTATGTTGAAGGCGTAAAGCACAAAACTAGTTACCCCAACTCCTGAAGGTTAGGACTGAAAGTCTTCGCGCCCCTGCAAGCCCTTTTAGACACTACTTAGGTCCGTTTACTATCGGTAACTCAGGATCACACCGAGGTTCTCACCGGGTGGGTTCACGTTGTTCGGCCTGAGCGAAATAAGGCCGTATTAGCAGAGCGCGACTGCAAGCGCCGCCGTTTCCCACTGCACAAAGCTGTCGATAGTAGGCACAAT
CGCTGTAAGTACCATGACTCGCCTGGCCCCGCAAGTTAGTAACCCTAACCGTCTGCTTCGCCATGGACCCTTATGTCGAATGAGAACTCAGGATTACTCCTCCTGCCGCTTTAATTGCGCAAGGCTTCCAGTGAGCCGCAGCGTGTCCTTTAACTGGCACAACCACATTCATTTATGGAAGGGCTTCCCCCTCGCTATGGAGTGTGGATAGGCGCCACCCTGATTCTACCCGCGCGTTCCCACAGAGCGTCGGCCTGTCGCTATAAAAAGAAATAGACTGGCCTTAATTGTCACACAGCATGCTGGCACTTAGAGTGCAGCGAGTA
GGTTAATTCTTGATCCCCTACGCACCACCAGATGACTTTGAGAGAGGATGAGCAAAATGTGAGCCGAGGTTCGATTGTGCAATTAGTTCCTAACTAGGTCGCGATTGGACGCGAATCAAAGAGGGTTAAGGGACGTAATGCGCTGGCTCTCTCCCGCAATATGCTTAGCATTAGAGTGGTTACTTCTCTTTTAATGGAATAGACCAGTCAAAATTCCATTCAGGGCTAGTCTCTTAGAAGTAACGTCTGCTTATGAATCCTTGTATGCTGACCTTCAACTCAATTTCTTTCCGCTGTGAGCATTTAGCGCGATTGGGGACTGTTGT
TGGTACGTTAGTGGCGATCCGGTTTGTAGGTACTCGTTTCTTGTCATCACCTGGTTTGTCAAGTACCTAATTCCCTGATACCATCGGCTAGTAAACTTCGTAGGAAACCGCCCTCTCATGTCTCATATAAAGGGCGAGAGGGAGGTGCGGAGAGCTTGTATTGTATGATGTTTACGATACGTGATCGTTGCGAATCCAGGACGGTAACACTCTGCACGTGATACCCGCATGAAGGATCTTTCCTATGGTGCACATATCGCACACCATGCCCGAAAGGTTCACGACTAAGCTGTGTCATACTCAGAGGATTGCTATCTGTCATGCCT
GAGGCACTGTTAGGGTCCTTGACAACTGTGACTCGACTTATCGTCAATGTCCGGACGCTTTAAGCGAACAAACGCAGAATAATCAAGGAGATAATTATCGCACTCAGCGGTGAATCGAAAGAAAGTGGGAAACATGATAGCTACGTAGTAAGCGACGGAATCAACTCCAGGTAATTCGATAAGAGTACTTAAAGACGCTAGCCAATCGACAGTGGATCTTTCCTAGCGCGTCATCCTGGCGAGGCACAAAGCGGTAGTTATCGTAAGGAACAGAATTAGTCCAGAGAGCGATGAGTTGCGTCATAGCATACTCCTATGTCGGGTCC
GAGCTAAGTCGAGTCTTATTTTAACGGCTAAGTACACACAGAGCCAACTGTTATCTGAGCACATGAGTTTTTTGAGAGTTTCGGTCAATTAAAGGACTCAGGAGTCTTCCAAGTTGTCTAAAGTCTCGATATGCATTTAAACGTGTTGCTAAGTCTGATTTACCACGAGAACACTGACGATTATACGTACTGGGACCTATACGACTGGCCGACGAAATTCCCTCCGGTGCATAGCGTCTGGACAATTCCTGTCAAGGGGCGCTACAGATCTGGATGGCAATGTGCACGTTCGTTCAGGGGTGTCAAGGACGCGGATTACTACCGGG
ATTGTGCCAGATTGCTAGGCCCATACAGACGCAGGGAAACACCGGTCACCTAACCTTGTTGCCAAACGCCCAGACATCAGAACTAATGACCATCCACATCTCATTGTAAACGGAAAGGTGGTAACTCGAAAGCAATATCGCTGCGTAAGTTCATGTTTGGGAAGCTCCCCTCACTTGTGGAGAATTTCACCCGACGTGGGTGTATCGTTGCGTGAATCGCTTCTCAGGATCTTTTGGGAATTCCCAAACCGTAATAAAATGCCCACGCCCACGGGTCGTACACTTTTTAACAATAGTATTACTTAAAAGAAACCGTTAGTCGAAAC
CCCGATGATCGGGCTGAAGCCACATTCCAAACATTACTTCATTGTATTGCATTCTGATCAGAGTCACTTACGATCTGGGCGACCGACTGCTCAAACACGACGCGATAAAAGGGTAGGCGCTCTAGAAGTATATCCTATAAGGAGAACTCAGGATCTTCGAAGGTTGCGCTGGCTCTGCTGAGCTTAGCATCCGAAGCCATAAAATCTCAGTTAGTCCAGTTGCCGCCTACCCGATTCTACCTCGTCGGTGAACCCTGACCGTTAAGAATTGACATGGATTTGATCGCGGGATTCTTACTGCGACCGCCTCCATGAGGTATTATGAC
GCGATACTTTGTCAATGCTGGCGGTTGTTCCCTCTAACCGCTCTCGGCCCATAGTACGTCACCTAGGTTGCGAAGTGGCCCTGTCGCGAGTCATAGACGGATCGGACTACTCGTAAACTCAGTACACGCCGCTGGTTCGGCCATCGGGTCAAAGAAGAGAGATTACTCGACATCTTTCCCCAAAGAATTCATAGCGGTTGTTGATTTGCTGAGTTGCAGCATCCCAGTATTCTACCGAACAATTGATCGCGCCGTGTCGAGACGTCTCTATCAAGTCCCATGCAGGACACAAACTTAAAATGCCGTACACGACATTTAAGCATCAT
AAATGGATTTCGAGATCCTGACCCGCGACATAGCAGTCACACTCCTAATCTTTCCACTGATATTCTCGTGACTGTTGGACGACACTGTTTTAGCGCCATCGTTCGGAATAAAGTGTGAGGAACACAAAAAAGACGTGCCCTGATCGGATGCATGTATGTAACCGTTCGGGTTCAAAACGTCGGTGATGAGGCATTCTCCTAGATCCACATATAAACACGTGTGCGGAGATCCTTTGTTAAACCCAAGACTTAACCTAATACACTTACTCATATCCCAAACTTAGACCCCGGAGGGACCCTAGTTCTCCGTATTCGCTATCCTTTTT
CTTAAGCTGCTCTCTCATTAGTATTGGAGACAGTTGATCCTCGCGTCTGCTATAAGTCACCGATTCAGCCTAAGAGGATTGAAGGACCAGGATCTTTCCCAATCGCTCATTACCTACGTTACTCGATGAACGTACCCGAATTCTCCCGACGCCAGAGCTGTCGGCGATAGCCAGACCCCACATCTTAATACTTTTGATGTCTCTTTTCTCGACAATCAAAATGAATTTTTTGCAGGCACCTTAAACATGAGACCTGGGCGCGGAAGGGAAGAACTGGATCCTTACCAATGTGAGTCCGAGACCACGCAGCCTGATGTGCTCCTCCG
TGAGCTACTGGGTTCTTCTCTTGATTATACCTAGAGCTCAGCCAATAGGCTTAGCTGCTCACATCAGATGAATTTGGGCCATTGTTTTTCGTTAACTGGATCAAGCTCCGGGTTCCTATGTTGATTGAATCGTACTCCTCGGTGTGTTGTGCCTCCCCTACACATGTTGGTCAGCATGCGTAGCAACTTCTATAAGTGCGAGAGATCGCCTATGGTTGGCTGTATATGGTGCATATATCATCGACTCAGCTGCTTTCCCCGTCTGGCCCAGATTAGCCAAGATGTGATTCCCCACATCATGTTTTTTGATCAACAGGGTCGTATTT
TTGTGTCTGGTGGTGAGCAAACTGCTGATGAAGAACAGCGAGGGTGGGTCCCTGATTCTAACTTGAGAGCATCACTATAAGTCTCTATTGTCTGAGCTCCATGAGTGCCAGGACCTGCAGATCTGCCACGTGTAGATTATTCAGGTTCTATGTGTTGACATCTGCGCGCCAACGCTAGCAGTCAATACCAGATTTGAGTACTTGTGCTAGGTTGTCTTAATACGCCGTCGCGGAGCCAGAGGTCCCGAGGTCTGTAAAACTCAGGTCATTTCCACCAAAATAATGGAAACGAGCCTAACTCTCAATCGGTCTGATGAGCCTTTTCA
TGAGTCTCCATCCCTGTTGCTTAGCACTTTTATGAGCGTAATCCTTGAGGTCTTGAATATCTTTGTCACAGGTAGGGACATGCTAATATCTACAGATAGTTGACAGGTGAGAAGTAATTTGTTATGGCCGGCGTATTCTGGCCCCTACACACTTGTTTGCATGACATTTTGGAATGGCAGGCCACGTTAGGAGCGTTTGGTGATGAAGGTAGAATCCTCGTAGTTCGGTAATTTGGCGGAGGATCAAAGCTATAGCGTCACAACTGGCAGTTGATCAGGATCTTTCATAGATATCTAACTACTCGTCGTACGCAACTTCCTACCCC
GCAACCGCTATACGTTATAAAGACCCCCAGTGGGCAGCCCCGGTCTAACACAAGTAAACAGTCGTCCTTACTCGAACCTTGGAGAGGTATTGGATGGTATTTTGCGTATGGCATGTCTGCAATGCGTGCAGCACGCACTCAGGATCTACGCTGTTGTAAGGTCCGCTAGTCAGCGAATGGATGATGGCGAAATGCTAACAGGGGTGATTCGCTGTTATGGTCCCGCAGCATAATCCGACTGGTCCGTCTGGTCAAGTTGGTCCCTTTTAGGTTAGCGCCTCCGTATACGATCAATACAAGGTACGCGTAGTATGCGCTATCGACGA""".replace(
        " ", "").split("\n")

    k = 15
    t = 20
    n = 2000

    best = sys.maxsize
    best_result = []

    count = 0

    for i in range(0, 2000):
        result, score = gibbs_sampler(dna, k, t, n)

        if score < best:
            best = score
            best_result = result[:]
            count = 0
        else:
            count += 1
            if count > 20:
                break

    print ("\n".join(best_result))


if __name__ == "__main__":
    sys.exit(main())