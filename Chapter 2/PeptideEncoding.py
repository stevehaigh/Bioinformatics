"""
    File: PeptideEncoding
    Author: steve
    Created: 04/11/2014
    
"""
import sys

from Tools.Amino import Amino
from Tools.CodonTable import CodonTable

table = CodonTable()


def GetDnaSeqAndPeptide():
    aminoUtil = Amino()

    with open("B_brevis.txt") as contents:
        dna = contents.read().strip('\n')

    tyr = "Val-Lys-Leu-Phe-Pro-Trp-Phe-Asn-Gln-Tyr"
    tyrList = tyr.split("-")
    tyrosidineB1 = ""
    for p in tyrList:
        tyrosidineB1 += aminoUtil.protein_mapping[p]

    return dna, tyrosidineB1

    # #return "GGGGAGTAGTTCTATACGACGACGTAGTCTGTCTATAACTACTAAGAGCCGCGATGAAGCTGGTACTTGTGATGGTCAGTCTCTAAATCTGTCCTACCCCTGGCGGTTTAAAGAAGGGCAAGTTATCTAGCCACCCAACCGAAGAGACAAAAAACGATACTAGGCCGACATGATCAAGAAGTCTCTCCCTGGTTCAAAAGTCTTCCCAGACACAATCGTTTTGAGATAAATGGCGATATCAAAGCAATCGATCGATTCGACTATAATGACTTTGGACCTGTAGTAATGCGCGCTGCGCGCAACTTGTTTTGATAAATACGACGGCATAAACCCCTATTAAGGCTGAACCACATATGATTTTGTTAGCATAGGCCAGTGGTTGTAGCAGTCAAAAAAAGTGTCAAAGTGGCATAGATAAGCGGAAAGTGAACTGCCTACGGACTTACCCGCGTGGATGCTCTGCAATGAACCCTAGAAAGCCGCCAAGGCGTCATAATAAGATCGGGGAGAGGCCCCATCAGCTCTGGTAGCGAGACCGGGCACGATGGTTCATTCTACTGACCGTTTTAATAACATACCTTTGGACATCGGGACTCCGACCAGTTATGATGGGTAGAGCTGATGCACGCACTCAAGCCCGTATCCCGTACGGCCCGCACCTAAGTGGCCACTAGAGAAGTGACGTACAAGATTAGGGGTCATGGTTTAGGACATCAGGAAGTGCGGGTATTGGCGACATAGGGGGGTACTTGAAGAGTATTGCTTATCCCGTCTACTCAAGCCCGATAGACGAGGTGCATTTTCTTGTTATAATCGAACCTATCGATCGCTTTTATTCTTGTACTAGGGAAACTGGTGATATTGCTTTTTAGTAATCGGAACTCGCCCAGAAGCCTAGTGACATGGATTTTGAAGTGAACCCGAAGTCCACGCCAGTGCACCTTAACTCACTTGTTAATCGTAGTCGCACGTTCTCTGGGACTAACCACCTTATGTACTAACGATGAAGTGAGAAAGAACAGACCCGTGCTTAAGAGGCTTTTCGACCGAGTAGAAACGTCAGAGGTCGGTAGGAGTGGAATATAATCGCCACGTCCTACAGTGGGTAAATTAGAGTATGACTTACTAGTTGGGCCTGTTAAACGGTGGATAGCGTCGTCTCCCCTACAGCTACACCTTATCTTTGGGCTAGGACTTTAAAATCGAATCTGTACCCATTAGGACCTTGAAAGCCCGCAGATACAGCCCGGAGGTGCGGACTGGTTGTCCTCACCGAATTGTGATGAAGGCGGCCCCAGCGTGGTTACCCAGCACTCTATCGATTAACGAACGCGGCCGAAGCAGTCGAAAAAAGATAGGACCTGGTTGTAATCGAAGCGATCTATAGCTTTTATTAAGGACGTTTCATTATGTCTTTTTGGAGGATTGTTCGAAGTACATATGTGCGTGTGTTTTTATAAAAGCAATTGACCGATTCGACTACAACACTTGGTTTGTAAACAGAGCGATGATGCATTGGTTAACATATGACTTAACCAGTGCACAGTAGTTTTCCCTTCCTACGGATATAGTAGCCTCAAAATGATTCTTACCCTTTCGACGGGTCGCTCATTCTTCTATGGTTTCGCGCGCACAGTCGGGATAAGCGAAGATGACCCTCGAGGAATATGTGTGAACAGAGTGTACTAAACTGGTAGTGGTGTGCGTACCATAAGTGCGTGTAACAAACTATGGATGTGGTACACAAAGATGTATAGGGCCAAGCATGCTCAACCCGACGCTTCTACGCTCCCTTCGAATGCACAGGACCGCGGGCTCTAAGAAAATTGGCGCAAACTAACAAGCCGATTAGGTACATCGTGCCCACCTCCTGAAATGTCTCATATGCATCCTTGCTCCTAAACAAGTTTATACCAACATAGGAAGTCAGGTAGTGGTTACTTTATGTCATGGTCTATTTTATGAGCAATTTGCGGTTAAACATGTTCACTCTTCGACAACCCAGGTCGTCTACCACTTGCTGGACCCCATTGACCTACGGGCACGTCCCCAAAGGGCCGTATACATCATCGGGTTTCATAAACAGGTCTTTGTCCAGTGCGCTAGCGTTCTTGCCCTGGAACCCCGCGCCGAAGCCAGCCCAGTGGAGCCTCCTAGGAGAAGCGGTCAATGGCTACGGCTACAGTCGTGCTTGATAGACTGGATCACCTTTGCAAGTGTGGCTCCCCCGTCTCAGCCTGGCTAGACGTCCGTTGTAGTCGAATCGATCGATGGCCTTGATGCGCTCATACATCTCCTAGAACAGCCAGTTTAGGTTGTGTCACCTCTTCGAAATCACGAGATCCCTACTTTGCGTAGGTTCACTCCCCGGAAGTATGAGAGTACCATTGGCCTTTTCTCAATCGGCCGTAGCTATTAGGAACCTGGTCACACGGGTTCCTTTTCTAGTGCGGAGACAAGAAAGGGATGTTGGCGGGTCAAAGCATATTAACATTAGCTCACAGTCGGCGGGCTAGTAAGGTTTGACGCGTCGTTTCTGGGTGTATCCGCAATAGTCACCACGCCACACCCAGGTGCCAGGGAGGGCTTGGGGTACGTGACCTATTTTGGGGGAGTAACGAGTATTCGCACCGAAGACTAACTGCTGACGTATTGCAGTGGTACATTTAGACACATCAAGGCGATAGATAGGTTTGACTACAATCCGAGCATAGTCAAAGAGCCAGGAGTGCAGCGCCATAGGCAGCTGGGCTTCTTAAATTACTTGGTCTAGAACCACCGGTTCCAAGTACGGGTGCTTATAAGAGACCTCCATCAGCGTCCAGATCTATCTGGTCGTAATAGAGTTTGACACAAGTCTTGGTTATTACTTAGTCCCTACAAGTACATATGTTAGAGACGTTGCAGCGATCTATGCCTACGAGTGGGTGATACTTCTGTTGACCCAGTTCGCATACTCAGCAATGGGTTCATGTTGTGGGTGACGTAGGTGGCGACTGAGTCACTGTGTGTAGACATTCTCTTACAAGGAGATTTCGCGTTACTGGGCGCCGGTGACAGCCCCAGAGATCGCCACCTGCTCTCGTGTACCATTGTGCAACGGGAGAAGCCCCGGATCTATCCAGTGTTATAGTCGAATCTGTCTATAGCTTTGATAGATCTCTTAGCAATTAATCGGCGCGACAGCCTGTGTTGGATGTCATCGACTTTCCTAGTTTGATGTATCCCACACTGGCGACAGCTTTTAATCCAATTATAGTCGAAGCGATCTATGGCCTTGATGAAATCCGCAGAACCAACAGCCGGCCCCAGGCGGTTTTTCTTGTGTTATTGCTGGGTTGCGTCTCGTAATAAATAGCACCGCGTTTATTGCCGTTGTATTTGGGAACACTTACAAATGTCTAGTCCTCGGACACACTTAAAATGACGGCTTAGATGTTACCTTACAACGGGCTCATGGTCCATCCAAACACATCCAATAAGGCGTACGGACCACGTCGATCAAGGCAATCGACCGATTCGACTACAACTTTTTGCACACATTCGTTCATAGCTTTTGGCATCGCGCCGACAACATGCACTGATACGTCGGCTGTAGGCGGATAGGAGCGATCCGACAAGTGGGCTTGACGATATCCCAATTAAGGCAATTGATAGATTTGATTATAACTAGCAAGCTTTCGAGGTGTAATACCGCGTGTCTTATTCAGAGACGAATCTACTCGTGCGTAAACCAGAATTATACAGGATCGGAATGTCTTGCCTTCCTCCGCGGGTTAGAGGATTGAGGGACCGTAGGCCCTACTTCCTATTGTTAAAGTGAGGGACATACATTGGGCGGTTCATGCTGACGCTATTTCACGCGTACTCGTCGGAGTCAGGTGGTAAACGCACGCTGCCCGCAAGCGGAAGAACTGCCCCCCGATTGCCATGTCCAAGTGCGTGCCCGTGAAGGCCCTCCGATGGACAACGTCCAACTCTTATTTAGCGGATCGTTGATCAGTAATCTGGAGATAAAATCAACTGCCACAGCTAGTTGCGTGCGTATACCTAGTGCATTAAAAGGACCAGCGCCTACCTACTTTTCGCGACATGATCCGCATTCGGACGACCAGTCGTGTTGCTATCCCAATACACGGACCACCTTACCGCAGCGTCATGCTTGACTATCCAGGAAGTGAATAAAGGCCATTGATCGATTTGATTATAACCGGCGTTTTATTTGTAACAGACTCACGTTCCGTGGAAGGTTAGTATTGTCGACGTCATCCGAATGCTATCTCGTCATTGAGGTTCTGCCGCAGTGGCACTGCAATATCGATCTGAGTCAAGGGACTCCTAACCACCATCACAATCGCAGCCGGGTGATAAAGTACGTTTGGCTAACTCCGGCTCCGCCTAGAGATTAGTGTTTAATCAGCGCTACGGATCGATCAGTCTATTTATCATGGGCGGACGTGATACGCCCCTTGCATAGTGGGCCTCGACAAGCCTACTTACCATCGCAGTCCTAATCAAAGTAGCCTCACACAGGAACAGTAACTCTCTACGGAACCTGGAGAGACAAGACACGGTGCCAGAAACAAACTGGGACCGCGGGCTAGACGTCTTGTAGTCAGTTATAGCTATGTTGCAAAAAAATGGCTTCTTTGCGGGCCTTAAGGACACCTCAAGTACAATGCTGCTTCCACCGCTCTGCTGTAGATAGACGTTCGACTGGGGCCGAAACATGCCCCAACGCGGAATAGGGCTGGAACTGGGTGGAAGTGATAGGGGCGGGAAAAATATCAATCAATTAGGGGGCCAGCTCCGTTTCCTAAGCGCGATCCCCTGTGAGCGACCTCGAGCGCCAACGTACGCTTGGTCACTTCTGTCTACCCGGATGAGGGTGCCTCAGCACCGCCGAGATGCGACGTGGAGATCCGTACATACTCTCAATATCTTGCGTTTTGTGACTTATATCGTATATACTAACTTTATTCTGGATTGCCTCCGCCGGGAGTCTCGGCTGCAGCTACTGTCGCACTCAGAGAAAATGGAGGAGACTGGCAGCATGTAAGAGTACCAACCAGAGTGTAGCTGTATTGCGTTGTAACTATATTCCGTAGGTTCTCTATACTTCTTTCTAAAGACGAGCTGGCCTTCCCTCGTGTCGTCGGCAGTGAGCCGCGGCAAGAATTTACTTTTGTCTCCTACGAGTCGATGACATGAGGCTCTAATATAGTGAGGGGTTGCGAAAAAAGGGCCGGTAAGGTCACCTGTGGAATTAGAGACATAAAACACTCCCTGCGAAATTCCTACAACATTCAGCGGTGATGCTGTATCAGTACGAGTAATGGAGGGCATGGAATCATGCCGTGTGGCGGATCAATCTCCAAAGCCAGCGAAATTGTTAAATGATTTGGTAGCATCACTTATTGTTTTCTGGAGGAATAGATCCGCGCTACTGGCTGTCGATGCTGCGTAGTGGATATGGTGTGGTTATAGTCAAACCGGTCGATGGCCTTAATCGTTAAGTCTTCTAGAGAAGCCCCACGAATACATCCGGCATCCCCTCCGGTTAACATACCTTATCCGGAGGTAATGCGAAGTGGCTTTCTCGTATCCTAGTTCGATAACCTCGCTCGTATCGGTGGCAAAAGGGTTGCAAATGCGTCTGGATAAGAATCATCAGGCTTTAAGATATCGTCATCACGCCCCATGTACACCTAGAGCGACAACGACTTGGCCTTCGCTTTTTCCCCGCCAGCAACCATTTTTGTACCATCAGTTTGGTCACTATACGTCCAGATGCAACATCTCTTCGATATAAGAACTTGTGCGATGTTTTCACGTAGCAAACTACCGCGTACTAAGACAAGCTCGCGCGCCGCTCTGGCTCTTCGGGACTCTGATGAAACCGAGGCCGGGGGTCCCCGGTGTTCGCCGTCGGTGCCGGTACGGGAAGAATTGTATAAAAGCCATCGACAGGTTCGACTATAACGATTCCGATCCATCATGGAGCCTGCCGTCTTATTTTCCCGCCGGGGGCCTTTCCGGGCGCCTCCATGTCCATAAGTAAAAAACTTTCTCATTCTTACGGCTTAGGTACTGCGACGCCGACCTTGGACCAAGTCCTATTTGGGCGAATTCGAATTTAAGGTAAATAACACCGGTCTAGCACCCTACTACTATAAAGGCTATTGACAGGTTTGACTATAATCATTCAATCTCGCGCAACTTATCCCGTGGTCTTCTTCCTATTCGACTACGGGCTAAAGCCCAAGGACCTCGAACGGCGGCCGAATTGGATAGTAAAGCATTACCACTGAAGAAAGTCGGCACTTACCTGTACCATACAATAAATAACTCCTAATCTGTATGGCTATTTGGCAAGTTCTAATTCGACCATTAAGGCCATCGACCGATTTGACTACAATTGCGACATTTACGTAAGGGATATACGTGACTAGGGACCTGCGTATCCAAGTAGCAAGCATGTCGAGGTCATGGTGGACATTAATCCAAAGCGCTTATGCACGCGCCAATATTCTTAACCATTGCTTTTGCTTTGAGTGTTAACCTCAGTCAACATAGCCAGCAAGCCTGTAAATGCCTTTCTGCGGGTCTTTAATGATTTTTGTCCAAAGTCAGTATGGCTTACTAGAAAGACTACAGCATGGCGCGAAATTATCGAAAGTGCGGAAAGTCTGCTGCTGGCACTCGGGCTATGTTCCCTTCAAATATCCGACGCGGTGTGCGGTTGGGCGCCGTGTATCCCGTCGGGGGAAAGCGAACTAGCGTCTTGCGTAAATACTATGAGGGTGTGCTCGATTCGGCCCACTCTAGCCTTTTTGATATCATAACCCTCTCATGGAGGTTGAGTACGTCTTATCTACTCGGGGAGTGAGCCCGTTCAGTAGTAAATCTCGGGGACCCTTGAGACGGTCCGCCTCGGGCGAAGACGCTGGGCAACTCGGGAGCGAGTGCACTTGCGTAGCCTTTGTATTCCCTTTATCGCTACTTTATTCACGGTTGGTGAGTACAAGGTGGTTTCTAACAAATTACAACAATGTACCCTATATACGATGAATGATTAAGGCGATAGATCGTTTCGACTATAACGTCTATCGGGGCAACGAGATGTATACTTCTATATTACGGATAGGCTTGTACCATGTACAACAAATGGCCAACTGCTGAATAAAAGCAATAGACCGGTTCGACTATAATTCGTACAGAGGATTAGGAGCAATCCAATCCGACGACTCGCGGGCAATAGCAAATCCTGCAGGGCGACGGTTCTTTTTCTGAGACAAAATGTTGGTCTTTGGGTGAGGGTCATGTTAGCGACCATTGGTGTAGCGGTTTGGTCAATTTACCATCTGAATGTAGTGTAACTTGACGTAATGGGTGAGGAGAGCACTTGATTTAGACCAATTGATGCATAAGTGGTGCTTAATAGTTTCGTATAGACCGCCTAAAGAAGTAGGTTCACGTCTATGGCTCATGACATAAGCCGGCGGCCAGTCTCTACAGGTCAAACTTTTCAACCCAAGTTCCTATTCCCGCTCACTTCGACAATATGGAAAATTTGGTTATTCTTCCTAGCACCTCCTAGTTCCCTTACCCACTTAATCGGTGTCATCGAAGGACAAGGGATCATCATTCACCTCACAATAGGACCTTAGCAAGAGTTGGACATTTCCCGTAGCGTCCCCACCGAGGGTCTCGATTGGGTCAACTATTCTTCCTCCCTGTACACCTGGTAGACTCCCGTATAAAAGCAATTGACAGATTTGACTATAACGTGAACAAGGGTAACGCGAATTATGCCTGCCCTGAAAACGCAGGTCGATAGAAATTATAGTCGAACCTATCGATAGCTTTTATTGACCTGATTGCCGATTGTCCTAGCAACTTCGGGACCAGCGAACGAGCTTAGTACTGCTGGCCTGTATGGGTTACATCTTGCAGTACATGGAGGTTTTACATGGATTAATCCTAACGGCCTCCGGCCTGCACCAGATCCACTAATAAGCGACACTCTGTTTCGTTACCCTACAGCCCGTGTCAGCTGTGGAACGGCGGCTCATCCTGATATCGTTCAAGTGAGATGCATATTCTCCGGATATAAAAACGAGAGGGAATCTATCTCCTAGGGGTATGAGATCAAACCACGTAGCGCGACCCCCACGCGAGCCTTTTCCCCCTGTAATGGTACACAGGTCCGCTGAATGTAGACTGGAACACACACTCGGCTGTGCGACACCATGATGGCCGGCGGATACCCGGACCTTAGAAAGAGACGACCAGATTCCCGATGCACCACATCGCTTCGGCTAGAATGGATTATCCCTATCAGGGACAGCATGACTGAGAACAGTGGTGCGTTATCAGGCACGCGAGCATCGCCAGTTAACCGCTTCGTTGATCGCGACTTATTAGTGACTGGGTCACCTTATTCTACCCGATACTAGTCTTCCCCACCGGGCTACAATGTCGGTATGACCTCAGATTATTTGTAATCTTTCGAACACAGTCTTCAGATATCGGACTCCTGATCAAAGCAATTGATAGATTTGACTATAACACCTATCAAGCCGCATCTTATGGCCTAATAATTTGTAGACCCTGGACCCATTGCTCTTAACTTCCCTAGGAAGCCTAGAAACAGTTGACAAATTAGGACTTAGCGCGTCCTGTCTGACCTGTGCGGGGCCGCTTGATATGACGACCTGAATACTCAACTCTTGATCTTATGCGCCGCACGAACATCAAAGTTCCTAGGGGCTCAACAGTATAGATGGTATTGTAGGGTCGCACGTAGGATGGTTTGTCATATGGTGGACTTTTCGATTCACAGGCAGAAAACTAAACCCTCACCAATCGCTTACCGCAACTAACACAGCCTCTACGAGTCATCGCACCGCTAAGGGTTCGCTTCAAGTGATCGCTGCGAACCACTTCAATGGAATTGGGGAGTATAGAGATGCTAAGCATGAGCGACATTGCCGCACTTAACACTCTTTAGAAGGCCTTTAAGCCCCTTAGAGTATTTGGTCCATACGAGCATG", "IKAIDRFDYN"


def read_matches_peptide(read, peptide):
    """
    :param read: read the read 3 bases at a time and check if the base matches the protein
    :param peptide:
    :return:
    """

    i = 0
    for p in peptide:
        codon = read[i: i + 3]
        amino = table.get_amino_for_codon(codon)

        # #print(codon, "->", amino.single_letter())

        if amino == None:
            return False

        if amino.single_letter() != p:
            return False
        i += 3

    return True


def main(argv=None):
    """
    :param argv: the command line args
    :return: nothing
    """
    if argv is None:
        argv = sys.argv

    dna, peptide = GetDnaSeqAndPeptide()
    rna = dna.replace('T', 'U')

    # #print(rna, peptide)

    num_codons_per_read = len(peptide)
    matches = []

    for i in range(0, len(rna) - (num_codons_per_read * 3) + 1):
        read = rna[i:i + num_codons_per_read * 3]
        # #print(read)
        if read_matches_peptide(read, peptide):
            matches.append(read)
        revc = read[::-1].replace('A', 'u').replace('U', 'a').replace('C', 'g').replace('G', 'c').upper()
        # #print(revc)
        if read_matches_peptide(revc, peptide):
            matches.append(read)
            ##print(".......")

    print("........")
    # #print("\n".join(matches).replace('U', 'T'))
    print (len(matches))


if __name__ == "__main__":
    sys.exit(main())